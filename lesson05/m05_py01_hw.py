# Number of task:

def real_len(text):
    print(text)
    len_text = len(text)
    print(len(text))
    return len_text


# 7

"""

Форматирование строк (метаязык форматирования)
Любое число можно записать несколькими вариантами записи:

десятичная запись
двоичное представление
шестнадцатеричное представление
научная нотация
с фиксированной точностью (количеством знаков после запятой)
и другие.

Например вывести числа от 1 до 15 в десятичном, шестнадцатеричном, восьмеричном и двоичном представлении:

for i in range(16):
    s = "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(i)
    print(s)
Кроме того, при создании строк бывает полезным отформатировать строку так, чтобы знаки на разных строках были друг под другом (добавить пробелов), добавить заполнения в строки для того, чтобы результат был всегда одной и той же длинны.

Для таких и подобных задач в Python есть встроенный мини-язык форматирования строк.

Или вывести квадраты и кубы чисел до 12 в виде таблицы отцентрировав значения в столбцах по 10 символов шириной:

width = 5
for num in range(12): 
    print('{:^10} {:^10} {:^10}'.format(num, num**2, num**3))
Суть работы с метаязыком форматирования состоит в указании в фигурных скобках каким образом следует преобразовать значение перед подстановкой. Форматирование работает и с f-строками, но для большей читабельности лучше воспользоваться методом format, который принимает в качестве аргументов значения для подстановки в строку вместо выражений в фигурных скобках.

Сами выражения в фигурных скобках могут состоять из описания в каком виде следует вывести число (формат записи, количество знаков после запятой и пр.) и указания чем дополнить строку (добавить пробелов в начале или в конце чтобы строка была N знаков длинной и т.п.).

Модификаторы
Мини-язык форматирования строк состоит из таких модификаторов, как:

имя поля, необязательный элемент, можем указать какую именно переменную сюда подставить по её имени:
s = "{name} {last_name}".format(last_name="Dilan", name="Bob")
print(s)   # Bob Dilan
преобразование, необязательный аргумент указывается после символа ! и может быть или r или s. Отвечает за то, надо ли попытаться преобразовать элемент, или отобразить элемент "как есть":
s =  "{name!r} {last_name!s}".format(last_name="Dilan", name="Bob")
print(s)  # 'Bob' Dilan
Спецификация
Спецификация гораздо более сложный модификатор. С её помощью можно:

менять разрядность представления целых чисел (десятичные, восьмеричные, шестнадцатеричные и др.);
print('dec: {:d} hex: {:x} bin: {:b}'.format(15, 15, 15))  # dec: 15 hex: f bin: 1111
менять точность представления дробных чисел (округлять до указанного количества знаков);
print('pi: {:0.3}'.format(3.1415))  # pi: 3.14
как отображать знак чисел:
print('"{}" "{:+}" "{:-}" "{: }"'.format(1, 2, -3, 4))  # "1" "+2" "-3" " 4"
как выровнять положение элемента и чем (какими символами) дополнить;
print("|{:<10}|{:*^10}|{:>10}|".format('left', 'center', 'right'))  # |left      |**center**|     right|
Знание об этом инструменте не является критически важным, но использование форматирования строк в домашней работе для конструирования более "красивого" результата выполнения скрипта будет плюсом.

Задание
Вы все также пытаетесь привести комментарии своих посетителей в красивый вид. Теперь вам необходимо вывести таблицу с комментарием и его рейтингом.

Создайте функцию formatted_comments(comments_dict)

Формат comments_dict

{'Nice service': 100, 'Polite waitresses': 39, 'Delicious food': 80}

Функция должна возвращать список отформатированных коментариев.

Сам комментарий должен быть отцентрован, а его рейтинг идти после него с выравниванием справа.

Количество дополнительных пробелов - 20.

"""


def formatted_comments(comments_dict):
    print(comments_dict)

    list_comments = []
    for key, value in comments_dict.items():
        list_comments.append("{:^20} {:>20}".format(key, value))
    
    print(list_comments)
    return list_comments


# 8


def fix_rate(rate):
    print(rate)
    try:
        return "{:b}".format(rate)
    except ValueError:
        return "{:0.3}".format(rate)


# 9
    # import re


    # def structure_recipe(recipe):
    #     recipe = re.sub(r"\d+", "", recipe)
    #     recipe = re.sub(r";", "\n", recipe)
    #     return recipe


# 10
    # import re


    # def total_price(order):
    #     print(order)
    #     list_order = re.findall(r'\d+', order)
    #     result = 0
    #     print(list_order)
    #     for price in list_order:
    #         price = int(price)
    #         print(price)
    #         result += price
    #         print(result)
    #     return result


# 11
import re


def find_password(passwords):
    print(passwords)
    password = re.search(r"[a-zA-Z]{5}\d{5}", passwords)
    return password.group()


if __name__ == "__main__":
    print(fix_rate(3.1533))
    # total_price(small chicken with cheese: 75, big lamb: 200)
    print(find_password("me1458kitol18293mat176498 Merea1984 maTias19587"))






